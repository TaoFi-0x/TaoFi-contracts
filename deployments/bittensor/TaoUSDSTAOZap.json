{
  "address": "0x4C705959f2c76385dEff7E4d5d54D8897802f91A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taoUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sTAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "sTAO",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taoUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taoUSDAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTaoUSDAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSTAOAmount",
          "type": "uint256"
        }
      ],
      "name": "zapAddLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6935382d0e68904ec9026b0ffb15f5e33decca3dde47ab5d4635fe560cd7814",
  "receipt": {
    "to": null,
    "from": "0x526a9eA036FB26f9D8b88236Df49C55EF9756B32",
    "contractAddress": "0x4C705959f2c76385dEff7E4d5d54D8897802f91A",
    "transactionIndex": 0,
    "gasUsed": "723675",
    "logsBloom": "0x
    "blockHash": "0x06b8c4971e966827970777b6013c80bb4e985adbf4c67deef816a84e01a8bce2",
    "transactionHash": "0xe6935382d0e68904ec9026b0ffb15f5e33decca3dde47ab5d4635fe560cd7814",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5198924,
        "transactionHash": "0xe6935382d0e68904ec9026b0ffb15f5e33decca3dde47ab5d4635fe560cd7814",
        "address": "0x9bB4FC27453e04318bf968f2E994B47eDa8F724D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004c705959f2c76385deff7e4d5d54d8897802f91a",
          "0x00000000000000000000000086fe181fbea665e52226b2981df83a89b6ede822"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x06b8c4971e966827970777b6013c80bb4e985adbf4c67deef816a84e01a8bce2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5198924,
        "transactionHash": "0xe6935382d0e68904ec9026b0ffb15f5e33decca3dde47ab5d4635fe560cd7814",
        "address": "0xf4E83cBF44415a9e677310950e250E2167842c7D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004c705959f2c76385deff7e4d5d54d8897802f91a",
          "0x00000000000000000000000086fe181fbea665e52226b2981df83a89b6ede822"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x06b8c4971e966827970777b6013c80bb4e985adbf4c67deef816a84e01a8bce2"
      }
    ],
    "blockNumber": 5198924,
    "cumulativeGasUsed": "723675",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9bB4FC27453e04318bf968f2E994B47eDa8F724D",
    "0xf4E83cBF44415a9e677310950e250E2167842c7D",
    "0x86fe181fBEa665e52226b2981Df83a89b6edE822"
  ],
  "numDeployments": 1,
  "solcInputHash": "904d50dc0394f7ae56ec4965dd9256a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taoUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sTAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"sTAO\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taoUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taoUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTaoUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSTAOAmount\",\"type\":\"uint256\"}],\"name\":\"zapAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TaoUSDSTAOZap.sol\":\"TaoUSDSTAOZap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/TaoUSDSTAOZap.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/ISTAO.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract TaoUSDSTAOZap is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable taoUSD;\\n    IERC20 public immutable sTAO;\\n    IUniswapV2Router02 public immutable uniswapRouter;\\n\\n    constructor(address _taoUSD, address _sTAO, address _uniswapRouter) {\\n        taoUSD = IERC20(_taoUSD);\\n        sTAO = IERC20(_sTAO);\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n\\n        // Approve tokens\\n        taoUSD.approve(_uniswapRouter, type(uint256).max);\\n        sTAO.approve(_uniswapRouter, type(uint256).max);\\n    }\\n\\n    function zapAddLiquidity(uint256 taoUSDAmount, uint256 minTaoUSDAmount, uint256 minSTAOAmount)\\n        external\\n        payable\\n        nonReentrant\\n        returns (uint256 liquidity)\\n    {\\n        // Transfer taoUSD from user\\n        taoUSD.safeTransferFrom(msg.sender, address(this), taoUSDAmount);\\n\\n        // Deposit TAO to get sTAO\\n        uint256 networkFee = ISTAO(address(sTAO)).networkFee();\\n        ISTAO(address(sTAO)).deposit{value: msg.value - networkFee}(address(this), minSTAOAmount);\\n\\n        // Add liquidity to Uniswap\\n        (,, liquidity) = uniswapRouter.addLiquidity(\\n            address(taoUSD),\\n            address(sTAO),\\n            taoUSDAmount,\\n            sTAO.balanceOf(address(this)),\\n            minTaoUSDAmount,\\n            minSTAOAmount,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        // Return the rest to the user. Safe to return everything because this contract should not hold any assets\\n        taoUSD.safeTransfer(msg.sender, taoUSD.balanceOf(address(this)));\\n        sTAO.safeTransfer(msg.sender, sTAO.balanceOf(address(this)));\\n\\n        return liquidity;\\n    }\\n}\\n\",\"keccak256\":\"0x842e5d70512ff48ad36a469c0cd05cbc7a0abe9605d63f31e374d3ff43745bec\",\"license\":\"ISC\"},\"contracts/interfaces/ISTAO.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for STAO smart contract\\ninterface ISTAO {\\n    /// @notice Event emitted when a deposit is made\\n    event Deposit(address indexed sender, address indexed receiver, uint256 amount, uint256 shares);\\n\\n    /// @notice Event emitted when a withdrawal is made\\n    event Withdrawal(address indexed sender, address indexed receiver, uint256 amount, uint256 shares);\\n\\n    /// @notice Event emitted when the network fee is set\\n    event NetworkFeeSet(uint256 networkFee);\\n\\n    /// @notice Event emitted when a pub key is set\\n    event PubKeySet(bytes32 indexed pubKey);\\n\\n    /// Event emitted when the staking precompile is set\\n    event StakingPrecompileSet(address indexed stakingPrecompile);\\n\\n    /// @notice Event emitted when a stake is increased\\n    event StakeIncreased(bytes32 indexed hotkey, uint256 amount);\\n\\n    /// @notice Event emitted when a stake is decreased\\n    event StakeDecreased(bytes32 indexed hotkey, uint256 amount);\\n\\n    /// @notice Event emitted when the stakes are rebalanced\\n    event Rebalanced(bytes32[] hotkeys, uint256[] amounts);\\n\\n    /// @notice Returns the network fee\\n    /// @return networkFee The network fee\\n    function networkFee() external view returns (uint256 networkFee);\\n\\n    /// @notice Returns how much TAO is staked in the contract\\n    /// @return totalStaked The total amount of TAO staked in the contract\\n    /// @dev Calculation is done by summarizing the balance of the contract and the total stake on the staking precompile\\n    function totalStakedTAO() external view returns (uint256 totalStaked);\\n\\n    /// @notice Returns corresponding shares for the given amount of TAO, rounded down\\n    /// @param assets The amount of TAO to convert to shares\\n    /// @param totalStakeToDecrease The total stake to decrease\\n    /// @return shares The corresponding shares for the given amount of TAO\\n    /// @dev totalStakeToDecrease should be msg.value in case of deposit. For external use it should be 0\\n    /// @dev Calculation is done based on OZ implementation of ERC4626 standard in order to avoid inflation attack\\n    function convertToShares(uint256 assets, uint256 totalStakeToDecrease) external view returns (uint256 shares);\\n\\n    /// @notice Returns corresponding TAO for the given amount of shares, rounded down\\n    /// @param shares The amount of shares to convert to TAO\\n    /// @return assets The corresponding TAO for the given amount of shares\\n    /// @dev Calculation is done based on OZ implementation of ERC4626 standard in order to avoid inflation attack\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /// @notice Sets the network fee\\n    /// @param networkFee The new network fee to set\\n    /// @dev This function is callable only by the owner\\n    function setNetworkFee(uint256 networkFee) external;\\n\\n    /// @notice Sets the public key of the contract\\n    /// @param pubKey The new public key to set\\n    /// @dev This function is callable only by the owner\\n    function setPubKey(bytes32 pubKey) external;\\n\\n    /// @notice Sets the staking precompile address\\n    /// @param stakingPrecompile The new staking precompile address to set\\n    /// @dev This function is callable only by the owner\\n    function setStakingPrecompile(address stakingPrecompile) external;\\n\\n    /// @notice Rebalances the stakes of the contract\\n    /// @param hotkeys The hotkeys to rebalance\\n    /// @param amounts The amounts to rebalance to\\n    /// @dev This function is callable only by the owner\\n    function rebalance(bytes32[] calldata hotkeys, uint256[] calldata amounts) external;\\n\\n    /// @notice Increases the stake of the contract\\n    /// @param hotkey The hotkey to increase the stake for\\n    /// @param amount The amount to increase the stake by\\n    /// @dev This function is payable and callable only by the owner\\n    function increaseStake(bytes32 hotkey, uint256 amount) external payable;\\n\\n    /// @notice Decreases the stake of the contract\\n    /// @param hotkey The hotkey to decrease the stake for\\n    /// @param amount The amount to decrease the stake by\\n    /// @dev This function is callable only by the owner\\n    function decreaseStake(bytes32 hotkey, uint256 amount) external;\\n\\n    /// @notice Deposits TAO into the contract, minting sTAO to receiver\\n    /// @param receiver The address to receives shares\\n    /// @param minSTAO The minimum amount of sTAO to mint\\n    /// @dev If the amount of TAO is less than minSTAO, the transaction will revert due to big slippage\\n    function deposit(address receiver, uint256 minSTAO) external payable;\\n\\n    /// @notice Withdraws TAO from the contract, burning sTAO from sender and sending TAO to receiver\\n    /// @param amount The amount of sTAO to burn\\n    /// @param receiver The address to receive TAO\\n    /// @param minTAO The minimum amount of TAO to receive\\n    /// @dev If the amount of TAO is less than minTAO, the transaction will revert due to big slippage\\n    function withdraw(uint256 amount, address receiver, uint256 minTAO) external;\\n}\\n\",\"keccak256\":\"0x0cd4aee9b402a24f747e6e3ccc40702bc0d5ad58e8acd30d71c8d9e2eece07da\",\"license\":\"ISC\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.21;\\n\\ninterface IUniswapV2Router02 {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n}\\n\",\"keccak256\":\"0xc42ac6c5a5823fe256233432cf8b16439e6a1df32bccc9b48726df629e3df15d\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162000cec38038062000cec833981016040819052620000349162000164565b60016000556001600160a01b03808416608081905283821660a05290821660c05260405163095ea7b360e01b815263095ea7b3906200007c90849060001990600401620001ae565b6020604051808303816000875af11580156200009c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c29190620001c7565b5060a0516001600160a01b031663095ea7b3826000196040518363ffffffff1660e01b8152600401620000f7929190620001ae565b6020604051808303816000875af115801562000117573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013d9190620001c7565b50505050620001f2565b80516001600160a01b03811681146200015f57600080fd5b919050565b6000806000606084860312156200017a57600080fd5b620001858462000147565b9250620001956020850162000147565b9150620001a56040850162000147565b90509250925092565b6001600160a01b03929092168252602082015260400190565b600060208284031215620001da57600080fd5b81518015158114620001eb57600080fd5b9392505050565b60805160a05160c051610a806200026c6000396000818160bd015261026401526000818160f101528181610156015281816101e2015281816102b4015281816102d6015281816104c8015261055d015260008181607c0152818161012a015281816102930152818161041b015261049b0152610a806000f3fe60806040526004361061003f5760003560e01c80630ff9933f1461004457806368dd33bd1461006a578063735de9f7146100ab578063b1232ac0146100df575b600080fd5b6100576100523660046108ee565b610113565b6040519081526020015b60405180910390f35b34801561007657600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b604051610061919061091a565b3480156100b757600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156100eb57600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b600061011d610596565b6101526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330876105f4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639db9e18b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d6919061092e565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166347e7ef246102118334610947565b30866040518463ffffffff1660e01b815260040161023092919061096e565b6000604051808303818588803b15801561024957600080fd5b505af115801561025d573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e8e337007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000887f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610320919061091a565b602060405180830381865afa15801561033d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610361919061092e565b6040516001600160e01b031960e087901b1681526001600160a01b039485166004820152939092166024840152604483015260648201526084810187905260a481018690523360c48201524260e4820152610104016060604051808303816000875af11580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610987565b6040516370a0823160e01b81529094506104c292503391506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061045090309060040161091a565b602060405180830381865afa15801561046d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610491919061092e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610665565b610584337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610512919061091a565b602060405180830381865afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610553919061092e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610665565b5061058f6001600055565b9392505050565b6002600054036105ed5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b6040516001600160a01b038085166024830152831660448201526064810182905261065f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610689565b50505050565b6106848363a9059cbb60e01b848460405160240161062892919061096e565b505050565b60006106de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661075e9092919063ffffffff16565b90508051600014806106ff5750808060200190518101906106ff91906109b5565b6106845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105e4565b606061076d8484600085610775565b949350505050565b6060824710156107d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105e4565b600080866001600160a01b031685876040516107f291906109fb565b60006040518083038185875af1925050503d806000811461082f576040519150601f19603f3d011682016040523d82523d6000602084013e610834565b606091505b509150915061084587838387610850565b979650505050505050565b606083156108bf5782516000036108b8576001600160a01b0385163b6108b85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105e4565b508161076d565b61076d83838151156108d45781518083602001fd5b8060405162461bcd60e51b81526004016105e49190610a17565b60008060006060848603121561090357600080fd5b505081359360208301359350604090920135919050565b6001600160a01b0391909116815260200190565b60006020828403121561094057600080fd5b5051919050565b8181038181111561096857634e487b7160e01b600052601160045260246000fd5b92915050565b6001600160a01b03929092168252602082015260400190565b60008060006060848603121561099c57600080fd5b8351925060208401519150604084015190509250925092565b6000602082840312156109c757600080fd5b8151801515811461058f57600080fd5b60005b838110156109f25781810151838201526020016109da565b50506000910152565b60008251610a0d8184602087016109d7565b9190910192915050565b6020815260008251806020840152610a368160408501602087016109d7565b601f01601f1916919091016040019291505056fea2646970667358221220c07bec59bf580efbdb1b5cb44a153012b711ab80ba2cdbe45df742eb13363bc264736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80630ff9933f1461004457806368dd33bd1461006a578063735de9f7146100ab578063b1232ac0146100df575b600080fd5b6100576100523660046108ee565b610113565b6040519081526020015b60405180910390f35b34801561007657600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b604051610061919061091a565b3480156100b757600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156100eb57600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b600061011d610596565b6101526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330876105f4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639db9e18b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d6919061092e565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166347e7ef246102118334610947565b30866040518463ffffffff1660e01b815260040161023092919061096e565b6000604051808303818588803b15801561024957600080fd5b505af115801561025d573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e8e337007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000887f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610320919061091a565b602060405180830381865afa15801561033d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610361919061092e565b6040516001600160e01b031960e087901b1681526001600160a01b039485166004820152939092166024840152604483015260648201526084810187905260a481018690523360c48201524260e4820152610104016060604051808303816000875af11580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610987565b6040516370a0823160e01b81529094506104c292503391506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061045090309060040161091a565b602060405180830381865afa15801561046d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610491919061092e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610665565b610584337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610512919061091a565b602060405180830381865afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610553919061092e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610665565b5061058f6001600055565b9392505050565b6002600054036105ed5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b6040516001600160a01b038085166024830152831660448201526064810182905261065f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610689565b50505050565b6106848363a9059cbb60e01b848460405160240161062892919061096e565b505050565b60006106de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661075e9092919063ffffffff16565b90508051600014806106ff5750808060200190518101906106ff91906109b5565b6106845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105e4565b606061076d8484600085610775565b949350505050565b6060824710156107d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105e4565b600080866001600160a01b031685876040516107f291906109fb565b60006040518083038185875af1925050503d806000811461082f576040519150601f19603f3d011682016040523d82523d6000602084013e610834565b606091505b509150915061084587838387610850565b979650505050505050565b606083156108bf5782516000036108b8576001600160a01b0385163b6108b85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105e4565b508161076d565b61076d83838151156108d45781518083602001fd5b8060405162461bcd60e51b81526004016105e49190610a17565b60008060006060848603121561090357600080fd5b505081359360208301359350604090920135919050565b6001600160a01b0391909116815260200190565b60006020828403121561094057600080fd5b5051919050565b8181038181111561096857634e487b7160e01b600052601160045260246000fd5b92915050565b6001600160a01b03929092168252602082015260400190565b60008060006060848603121561099c57600080fd5b8351925060208401519150604084015190509250925092565b6000602082840312156109c757600080fd5b8151801515811461058f57600080fd5b60005b838110156109f25781810151838201526020016109da565b50506000910152565b60008251610a0d8184602087016109d7565b9190910192915050565b6020815260008251806020840152610a368160408501602087016109d7565b601f01601f1916919091016040019291505056fea2646970667358221220c07bec59bf580efbdb1b5cb44a153012b711ab80ba2cdbe45df742eb13363bc264736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/TaoUSDSTAOZap.sol:TaoUSDSTAOZap",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}